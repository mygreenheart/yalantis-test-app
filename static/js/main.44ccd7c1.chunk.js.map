{"version":3,"sources":["components/Employees/Employees.js","components/EmployeesBirthday/EmployeesBirthday.js","App.js","reportWebVitals.js","index.js"],"names":["Employees","props","AlphabetEmployer","alphabet","arr","filter","employee","lastName","slice","isChecked","employeesBirthday","iterator","id","employeesData","sort","a","b","comparison","className","map","length","firstName","type","checked","onChange","e","handleChange","target","EmployeesBirthday","months","birthDay","Object","entries","monthDay","Date","dob","getMonth","key","push","birthDayDivs","getUTCDay","getFullYear","App","useState","setEmployeesData","JSON","parse","localStorage","getItem","setEmployeesBirthday","useEffect","fetch","then","response","json","setItem","stringify","check","prevArray","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44ccd7c1.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Employees.css\"\n\nexport default function Employees(props) {\n\n    const arr_EN = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n    props.employeesData.sort((a, b) => {\n        let comparison = 0;\n        if (a.lastName > b.lastName) {\n            comparison = 1;\n        } else if (a.lastName < b.lastName) {\n            comparison = -1;\n        }\n        return comparison\n    })\n\n    function AlphabetEmployer(alphabet, arr) {// Retrun array for each alphabet laters\n        return arr.filter(employee => {\n            return employee.lastName.slice(0, 1) === alphabet\n        })\n    }\n\n    function isChecked(employee) {//Check epmloyees in localStrage. If eployee there are, checked if true\n        for (const iterator of props.employeesBirthday) {\n            if (employee.id === iterator.id) {\n                return true\n            }\n        }\n    }\n\n    return (\n        <div className=\"Employees\">\n            <h1>Employees</h1>\n            <div className=\"Employees-card\">\n                {arr_EN.map((alphabet) => {\n                    return <div key={alphabet} className=\"alphabet\">\n                        <h2>{alphabet}</h2>\n                        {(AlphabetEmployer(alphabet, props.employeesData).length > 0) ?  //Create divs from arrays \"AlphabetEmployer\"\n                            (AlphabetEmployer(alphabet, props.employeesData).map(employee => {\n                                return (\n                                    <div key={employee.id}>\n                                        {employee.lastName + \" \" + employee.firstName}\n\n                                        {(isChecked(employee)) ?\n                                            <input type=\"checkbox\" checked=\"true\" onChange={(e) => {\n                                                props.handleChange(employee, e.target.checked)\n                                            }} /> :\n                                            <input type=\"checkbox\" onChange={(e) => {\n                                                props.handleChange(employee, e.target.checked)\n                                            }} />}\n\n                                    </div>)\n                            })) :\n                            \" ----- \"}\n                    </div>\n                })}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport \"./EmployessBirthday.css\"\n\nexport default function EmployeesBirthday(props) {\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const birthDay = {\n        \"January\": [],\n        \"February\": [],\n        \"March\": [],\n        \"April\": [],\n        \"May\": [],\n        \"June\": [],\n        \"July\": [],\n        \"August\": [],\n        \"September\": [],\n        \"October\": [],\n        \"November\": [],\n        \"December\": [],\n    }\n\n    function birthDayDivs() {\n        for (const employee of props.employeesBirthday) {\n            let monthDay = months[new Date(employee.dob).getMonth()]\n            for (const key in birthDay) {\n                if (key === monthDay) {\n                    birthDay[key].push(employee)\n                }\n            }\n        }\n        return birthDay\n    }\n\n    return (\n        <div className=\"EmployeesBirthday\">\n            <h1>Employees Birthday</h1>\n            {(props.employeesBirthday.length > 0) ? Object.entries(birthDayDivs()).map(e => {\n                if (e[1].length > 0) {\n                    return (<div>\n                        <h2>{e[0]}</h2>\n                        {e[1].map(employee => {\n                            return <li>{employee.lastName + \" \" + employee.firstName + \" \" + \"-\" + \" \" + (new Date(employee.dob).getUTCDay()) + \" \" + e[0] + \", \" + (new Date(employee.dob).getFullYear() + \" year\")}</li>\n                        })}\n                    </div>)\n                }\n            }) :\n                <h1>\n                    No selected employees\n                 </h1>}\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport Employess from \"./components/Employees/Employees\";\nimport EmployeesBirthday from \"./components/EmployeesBirthday/EmployeesBirthday\";\nimport './App.css';\n\nfunction App() {\n  const [employeesData, setEmployeesData] = useState([])\n  const [employeesBirthday, setEmployeesBirthday] = useState(JSON.parse(localStorage.getItem(\"employees\")))\n\n\n  useEffect(() => {\n    fetch(\"https://yalantis-react-school-api.yalantis.com/api/task0/users\")\n      .then(response => response.json())\n      .then(json => { setEmployeesData(json)})\n    localStorage.setItem(\"employees\", JSON.stringify(employeesBirthday))\n  }, [employeesBirthday])\n\n\n  function handleChange(employee, check) {//If (check === true) add to new Array, else remove from it\n    if (check) {\n      setEmployeesBirthday(prevArray => [...prevArray, employee])\n    } else {\n      setEmployeesBirthday(employeesBirthday.filter(item => item.id !== employee.id))\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <Employess employeesData={employeesData} employeesBirthday={employeesBirthday} handleChange={handleChange} />\n      <EmployeesBirthday employeesBirthday={employeesBirthday} />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}